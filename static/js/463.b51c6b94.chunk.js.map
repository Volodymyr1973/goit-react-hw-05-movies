{"version":3,"file":"static/js/463.b51c6b94.chunk.js","mappings":"uNAAO,IAAMA,EAAW,mCACXC,EAAY,gCACZC,EAAe,kC,oJCCdC,EAAa,SAACC,EAAOC,EAAUC,GAE3C,IAAMC,EAAM,UAAMN,EAAAA,GAAN,iBAAwBI,EAAxB,YAAoCD,EAApC,oBAAqDJ,EAAAA,GAArD,mBACZQ,EAAAA,EAAAA,IAAUD,GAAQE,MAAK,SAACC,GACtB,IAAMC,EAAaD,EAAKE,KACxBN,EAAOK,EACR,GAEA,EAEYE,EAAY,SAACC,GAE1B,IAAMP,EAAM,UAAMN,EAAAA,GAAN,uCAA8CD,EAAAA,GAA9C,mBACZQ,EAAAA,EAAAA,IAAUD,GAAQE,MAAK,SAACC,GACtB,IAAMC,EAAaD,EAAKE,KAAKG,QAC7BD,EAAYH,EAEb,GAEA,EAEWK,EAAiB,SAACX,EAAUY,GAExC,IAAMV,EAAM,UAAMN,EAAAA,GAAN,iBAAwBI,EAAxB,oBAA4CL,EAAAA,GAA5C,mBACZQ,EAAAA,EAAAA,IAAUD,GAAQE,MAAK,SAACC,GACtB,IAAMC,EAAaD,EAAKE,KACxBK,EAAcN,EACf,GAGA,EAEYO,EAAmB,SAACC,EAAOC,EAAMC,GAE5C,IAAMd,EAAM,UAAMN,EAAAA,GAAN,gCAAuCD,EAAAA,GAAvC,YAAmDmB,GAAnD,OAA2DC,EAA3D,mBACZZ,EAAAA,EAAAA,IAAUD,GAAQE,MAAK,SAACC,GACtB,IAAMC,EAAaD,EAAKE,KAAKG,QAC7BM,EAAcV,EACf,GAEF,C,iHCPH,EA/BiB,SAACW,GAClB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBH,EAAnB,KAGQD,EAAOE,EAAMG,WAYnB,OAVAC,EAAAA,EAAAA,YAAU,WACiB,KAArBJ,EAAMG,aAIVP,EAAAA,EAAAA,IARY,SAQYE,EAAMC,EAE/B,GAAE,CAACC,EAAMG,cAMN,0BACE,wBACGD,EAAWG,KAAI,SAAAC,GAAI,OAClB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAACC,KAAM,WAA9C,SAA2DJ,EAAKK,SADzDL,EAAKE,GADI,OAS7B,EChCYI,EAAe,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,gBAEzC,GAAoCb,EAAAA,EAAAA,UAASY,GAA7C,eAAOV,EAAP,KAAmBY,EAAnB,KAmBMC,EAAQ,WAChBD,EAAc,GACX,EAGD,OACE,iCACE,0BACE,kBAAME,SAdS,SAAAC,GACnBA,EAAMC,iBAENL,EADkC,KAAfX,EAAoB,CAAEiB,OAAQjB,GAAe,CAAC,EAEhE,EAUG,WACE,kBACAK,GAAG,cACDV,KAAK,SACLuB,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZ1C,MAAOqB,EACPsB,SA/BS,SAAAP,GACnB,IAAMQ,EAAaR,EAAMS,OAAO7C,MACb,KAAf4C,EACAV,IAEJD,EAAcW,EACf,KA2BS,mBAAQL,KAAK,SAAb,UACE,6CAIA,SAAC,EAAD,CAAUlB,WAAYU,MAGjC,ECjCD,EAde,WAAO,IAAD,EAEnB,GAAwCe,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBf,EAArB,KACMD,EAAW,UAAGgB,EAAaC,IAAI,iBAApB,QAAiC,GAGlD,OACE,+BACQ,SAAClB,EAAD,CAAcC,YAAaA,EAAaC,gBAAiBA,KAIpE,C","sources":["components/constants/Constants.js","components/fetch/Fetch.js","components/filmlist/FilmList.js","components/searchmovies/SearchMovies.js","page/Movies.js"],"sourcesContent":["export const KEY_FILM = '0402ef8c6d0b2370fa6ac2b572dad398';\nexport const originUrl = 'https://api.themoviedb.org/3/';\nexport const baseImageUrl = 'https://image.tmdb.org/t/p/w500/';","import axios from 'axios'\nimport { KEY_FILM, originUrl } from '../constants/Constants'\n \n export const SearchFilm = (value, paramsId, setFoo) => {\n\n  const apiUrl = `${originUrl}movie/${paramsId}/${value}?api_key=${KEY_FILM}&language=en-US`;\n  axios.get(apiUrl).then((resp) => {\n    const allPersons = resp.data;\n    setFoo(allPersons);\n  });\n\n  };\n\n export  const trendFilm = (setFilmList) => {\n    \n  const apiUrl = `${originUrl}trending/movie/week?api_key=${KEY_FILM}&language=en-US`;\n  axios.get(apiUrl).then((resp) => {\n    const allPersons = resp.data.results;\n    setFilmList(allPersons);\n    // console.log(allPersons)\n  });\n  \n  };\n\n export const searchFilmById = (paramsId, setFilmDetail) => {\n\n  const apiUrl = `${originUrl}movie/${paramsId}?api_key=${KEY_FILM}&language=en-US`;\n  axios.get(apiUrl).then((resp) => {\n    const allPersons = resp.data;\n    setFilmDetail(allPersons);\n  });\n\n \n  };\n\n  export const searchFilmByName = (query, name, setSearchFilm) => {\n\n    const apiUrl = `${originUrl}search/movie?api_key=${KEY_FILM}&${query}${name}&language=en-US`;\n    axios.get(apiUrl).then((resp) => {\n      const allPersons = resp.data.results;\n      setSearchFilm(allPersons);\n    });\n\n  };","import { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { searchFilmByName } from \"components/fetch/Fetch\";\n\nconst FilmList = (props) => {\nconst [searchFilm, setSearchFilm] = useState([]);\n   \n  const query = \"query=\";\n  const name = props.searchName;\n\n  useEffect(() => {\n    if (props.searchName === '') {\n      return;\n    } else\n  \n    searchFilmByName(query, name, setSearchFilm);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.searchName]);\n\n \n  return (\n\n        \n      <div>\n        <ul>\n          {searchFilm.map(film => (\n            <li key={film.id}>\n              <Link to={`/movies/${film.id}`} state={{from: \"/movies\"}}>{film.title}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    \n  );\n}\nexport default FilmList;\n\nFilmList.propTypes = {\nprops: PropTypes.string,\n };","import { useState } from \"react\";\nimport FilmList from \"components/filmlist/FilmList\";\n\nexport const SearchMovies = ({searchQuery, setSearchParams}) => {\n   \n  const [searchName, setSearchName] = useState(searchQuery);\n  \n\n\n\nconst handleChange = event => {\n  const filmSearch = event.target.value;\n   if(filmSearch === '') {\n      reset();\n  } else \n  setSearchName(filmSearch);  \n}\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const nextParams = searchName !== \"\" ? { search: searchName } : {};\n    setSearchParams(nextParams);\n    };\n\n  const reset = () => {\nsetSearchName('')\n  }\n \n\n  return (\n    <>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <input\n          id=\"movie_input\"\n            name=\"search\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search films\"\n            value={searchName}\n            onChange={handleChange}\n          />\n          <button type=\"submit\">\n            <span>Search</span>\n          </button>\n        </form>\n      </div>\n            <FilmList searchName={searchQuery}/>\n    </>\n  );\n}","import { useSearchParams } from 'react-router-dom';\nimport { SearchMovies } from 'components/searchmovies/SearchMovies';\n\n\nconst Movies = () => {\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('search') ?? \"\";\n  \n\n  return (\n    <>\n            <SearchMovies searchQuery={searchQuery} setSearchParams={setSearchParams} />\n            {/* <FilmList searchName={searchName}/> */}\n    </>\n  );\n};\n\nexport default Movies;\n\n"],"names":["KEY_FILM","originUrl","baseImageUrl","SearchFilm","value","paramsId","setFoo","apiUrl","axios","then","resp","allPersons","data","trendFilm","setFilmList","results","searchFilmById","setFilmDetail","searchFilmByName","query","name","setSearchFilm","props","useState","searchFilm","searchName","useEffect","map","film","to","id","state","from","title","SearchMovies","searchQuery","setSearchParams","setSearchName","reset","onSubmit","event","preventDefault","search","type","autoComplete","autoFocus","placeholder","onChange","filmSearch","target","useSearchParams","searchParams","get"],"sourceRoot":""}