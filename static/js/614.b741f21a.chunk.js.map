{"version":3,"file":"static/js/614.b741f21a.chunk.js","mappings":"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","sources":["components/constants/Constants.js","components/fetch/Fetch.js","components/filmlist/FilmList.js","page/Movies.js"],"sourcesContent":["export const KEY_FILM = '0402ef8c6d0b2370fa6ac2b572dad398';\nexport const originUrl = 'https://api.themoviedb.org/3/';\nexport const baseImageUrl = 'https://image.tmdb.org/t/p/w500/';","// import axios from 'axios'\nimport { KEY_FILM, originUrl } from '../constants/Constants'\n \n export const SearchFilm = (value, paramsId, setFoo) => {\n\n      fetch(\n      `${originUrl}movie/${paramsId}/${value}?api_key=${KEY_FILM}&language=en-US`\n    )\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        return Promise.reject(new Error('Insert other name'));\n      })\n      .then(results => setFoo(results))\n      .catch(error => console.log(error));\n      \n  };\n\n export  const trendFilm = (setFilmList) => {\n    fetch(`${originUrl}trending/movie/week?api_key=${KEY_FILM}&language=en-US`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        return Promise.reject(new Error('Insert other name'));\n      })\n      .then(({ results }) => setFilmList(results))\n      .catch(error => console.log(error));\n  };\n\n export const searchFilmById = (paramsId, setFilmDetail) => {\n    fetch(`${originUrl}movie/${paramsId}?api_key=${KEY_FILM}&language=en-US`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        return Promise.reject(new Error('Insert other name'));\n      })\n      .then(results => setFilmDetail(results))\n      .catch(error => console.log(error));\n  };\n\n  export const searchFilmByName = (query, name, setSearchFilm) => {\n    fetch(\n      `${originUrl}search/movie?api_key=${KEY_FILM}&${query}${name}&language=en-US`\n    )\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        return Promise.reject(new Error('Insert other name'));\n      })\n      .then(({ results }) => setSearchFilm(results))\n      .catch(error => console.log(error));\n  };","import { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { searchFilmByName } from \"components/fetch/Fetch\";\n\nconst FilmList = (props) => {\nconst [searchFilm, setSearchFilm] = useState([]);\n   \n  const query = \"query=\";\n  const name = props.searchName;\n\n  useEffect(() => {\n    if (props.searchName === '') {\n      return;\n    } else\n  \n    searchFilmByName(query, name, setSearchFilm);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.searchName]);\n\n \n  return (\n\n        \n      <div>\n        <ul>\n          {searchFilm.map(film => (\n            <li key={film.id}>\n              <Link to={`/movies/${film.id}`} state={{from: \"/movies\"}}>{film.title}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    \n  );\n}\nexport default FilmList;\n\nFilmList.propTypes = {\nprops: PropTypes.string,\n };","import { useState, useEffect } from 'react';\nimport FilmList from 'components/filmlist/FilmList';\nimport PropTypes from \"prop-types\";\nimport { useSearchParams } from 'react-router-dom';\n\n\nconst Movies = () => {\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('search') || '';\n  const [searchName, setSearchName] = useState(searchQuery);\n  const [search, setSearch] = useState('');\n  \n\n\nuseEffect(() => {\n  setSearch(searchQuery);\n  reset();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n}, [])\n\nconst handleChange = event => {\n  const filmSearch = event.currentTarget.value;\n   if(filmSearch.trim() === '') {\n      return;\n  } else \n  setSearchName(filmSearch);  \n}\n\n  const handleSubmitSearchFilm = event => {\n    event.preventDefault();\n    setSearch(searchName);\n    setSearchParams({search: searchName});\n    reset();\n  };\n\n  const reset = () => {\nsetSearchName('')\n  }\n \n\n  return (\n    <>\n      <div>\n        <form onSubmit={handleSubmitSearchFilm}>\n          <input\n          id=\"movie_input\"\n            name=\"search\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search films\"\n            value={searchName}\n            onChange={handleChange}\n          />\n          <button type=\"submit\">\n            <span>Search</span>\n          </button>\n        </form>\n      </div>\n            <FilmList searchName={search}/>\n    </>\n  );\n};\n\nexport default Movies;\n\nMovies.propTypes = {\n  searchName: PropTypes.string,\n  \n};"],"names":["KEY_FILM","originUrl","baseImageUrl","SearchFilm","value","paramsId","setFoo","fetch","then","response","ok","json","Promise","reject","Error","results","catch","error","console","log","trendFilm","setFilmList","searchFilmById","setFilmDetail","searchFilmByName","query","name","setSearchFilm","props","useState","searchFilm","searchName","useEffect","map","film","to","id","state","from","title","useSearchParams","searchParams","setSearchParams","searchQuery","get","setSearchName","search","setSearch","reset","onSubmit","event","preventDefault","type","autoComplete","autoFocus","placeholder","onChange","filmSearch","currentTarget","trim"],"sourceRoot":""}