{"version":3,"file":"static/js/463.2452464a.chunk.js","mappings":"+LAAO,IAAMA,EAAW,mCAEXC,EAAe,kC,mICA5B,E,OAAeC,EAAAA,OAAa,CAC1BC,QAAQ,kC,SCCIC,EAAa,SAACC,EAAOC,GACjC,IAAMC,EAAM,gBAAYD,EAAZ,YAAwBD,EAAxB,oBAAyCL,EAAAA,GAAzC,mBACZ,OAAOQ,EAAAA,IAAQD,EAEd,EAEYE,EAAY,WAEzB,IAAMF,EAAM,sCAAkCP,EAAAA,GAAlC,mBACZ,OAAOQ,EAAAA,IAAQD,EAEd,EAEWG,EAAiB,SAACJ,GAE9B,IAAMC,EAAM,gBAAYD,EAAZ,oBAAgCN,EAAAA,GAAhC,mBACZ,OAAOQ,EAAAA,IAAQD,EAEd,EAEYI,EAAmB,SAACC,GAE/B,IAAML,EAAM,+BAA2BP,EAAAA,GAA3B,kBAA6CY,EAA7C,mBACZ,OAAOJ,EAAAA,IAAQD,EAGhB,C,kHCMH,EA/BiB,SAACM,GAClB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAGQJ,EAAOC,EAAMI,WAYnB,OAVAC,EAAAA,EAAAA,YAAU,WACiB,KAArBL,EAAMI,aAIVN,EAAAA,EAAAA,IAAiBC,GAAMO,MAAK,gBAAEC,EAAF,EAAEA,KAAF,OAAYJ,EAAcI,EAAKC,QAA/B,IAAyCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GAEjF,GAAE,CAACV,EAAMI,cAMN,0BACE,wBACGF,EAAWW,KAAI,SAAAC,GAAI,OAClB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAACC,KAAM,WAA9C,SAA2DJ,EAAKK,SADzDL,EAAKE,GADI,OAS7B,EChCYI,EAAe,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,gBAEzC,GAAoCrB,EAAAA,EAAAA,UAASoB,GAA7C,eAAOjB,EAAP,KAAmBmB,EAAnB,KA0BA,OACE,iCACE,0BACE,kBAAMC,SAhBS,SAAAC,GACnBA,EAAMC,iBACN,IAAMC,EAAmC,KAAtBvB,EAAWwB,OAAgB,CAAEC,OAAQzB,GAAe,CAAC,EACxEkB,EAAgBK,EACf,EAYG,WACE,kBACAX,GAAG,cACDjB,KAAK,SACL+B,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZzC,MAAOY,EACP8B,SAjCS,SAAAT,GACnB,IAAMU,EAAaV,EAAMW,OAAO5C,MAIhC+B,EAAcY,EACf,KA6BS,mBAAQL,KAAK,SAAb,UACE,6CAIA,SAAC,EAAD,CAAU1B,WAAYiB,MAGjC,ECnCD,EAde,WAAO,IAAD,EAEnB,GAAwCgB,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBhB,EAArB,KACMD,EAAW,UAAGiB,EAAaC,IAAI,iBAApB,QAAiC,GAGlD,OACE,+BACQ,SAACnB,EAAD,CAAcC,YAAaA,EAAaC,gBAAiBA,KAIpE,C","sources":["components/constants/Constants.js","components/Api.js","components/fetch/Fetch.js","components/filmlist/FilmList.js","components/searchmovies/SearchMovies.js","page/Movies.js"],"sourcesContent":["export const KEY_FILM = '0402ef8c6d0b2370fa6ac2b572dad398';\nexport const originUrl = 'https://api.themoviedb.org/3/';\nexport const baseImageUrl = 'https://image.tmdb.org/t/p/w500/';","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: `https://api.themoviedb.org/3/`\n});","// import axios from 'axios';\nimport API from '../Api'\nimport { KEY_FILM } from '../constants/Constants';\n \n export const SearchFilm = (value, paramsId ) => {\n  const apiUrl = `movie/${paramsId}/${value}?api_key=${KEY_FILM}&language=en-US`;\n  return API.get(apiUrl);\n\n  };\n\n export  const trendFilm = () => {\n    \n  const apiUrl = `trending/movie/week?api_key=${KEY_FILM}&language=en-US`;\n  return API.get(apiUrl)\n  \n  };\n\n export const searchFilmById = (paramsId) => {\n\n  const apiUrl = `movie/${paramsId}?api_key=${KEY_FILM}&language=en-US`;\n  return API.get(apiUrl)\n  \n  };\n\n  export const searchFilmByName = (name) => {\n\n    const apiUrl = `search/movie?api_key=${KEY_FILM}&query=${name}&language=en-US`;\n    return API.get(apiUrl);\n  \n\n  };","import { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { searchFilmByName } from \"components/fetch/Fetch\";\n\nconst FilmList = (props) => {\nconst [searchFilm, setSearchFilm] = useState([]);\n   \n  // const query = \"query=\";\n  const name = props.searchName;\n\n  useEffect(() => {\n    if (props.searchName === '') {\n      return;\n    } else\n  \n    searchFilmByName(name).then(({data}) => setSearchFilm(data.results)).catch(error => console.log(error));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.searchName]);\n\n \n  return (\n\n        \n      <div>\n        <ul>\n          {searchFilm.map(film => (\n            <li key={film.id}>\n              <Link to={`/movies/${film.id}`} state={{from: \"/movies\"}}>{film.title}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    \n  );\n}\nexport default FilmList;\n\nFilmList.propTypes = {\nprops: PropTypes.string,\n };","import { useState } from \"react\";\nimport FilmList from \"components/filmlist/FilmList\";\n\nexport const SearchMovies = ({searchQuery, setSearchParams}) => {\n   \n  const [searchName, setSearchName] = useState(searchQuery);\n  \n\n\n\nconst handleChange = event => {\n  const filmSearch = event.target.value;\n  //  if(filmSearch === '') {\n  //     reset();\n  // } else \n  setSearchName(filmSearch);  \n}\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const nextParams = searchName.trim() !== \"\" ? { search: searchName } : {};\n    setSearchParams(nextParams);\n    };\n\n// Так робив, щоб очищати форму\n\n//   const reset = () => {\n// setSearchName('')\n//   }\n \n\n  return (\n    <>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <input\n          id=\"movie_input\"\n            name=\"search\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search films\"\n            value={searchName}\n            onChange={handleChange}\n          />\n          <button type=\"submit\">\n            <span>Search</span>\n          </button>\n        </form>\n      </div>\n            <FilmList searchName={searchQuery}/>\n    </>\n  );\n}","import { useSearchParams } from 'react-router-dom';\nimport { SearchMovies } from 'components/searchmovies/SearchMovies';\n\n\nconst Movies = () => {\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('search') ?? \"\";\n  \n\n  return (\n    <>\n            <SearchMovies searchQuery={searchQuery} setSearchParams={setSearchParams} />\n            {/* <FilmList searchName={searchName}/> */}\n    </>\n  );\n};\n\nexport default Movies;\n\n"],"names":["KEY_FILM","baseImageUrl","axios","baseURL","SearchFilm","value","paramsId","apiUrl","API","trendFilm","searchFilmById","searchFilmByName","name","props","useState","searchFilm","setSearchFilm","searchName","useEffect","then","data","results","catch","error","console","log","map","film","to","id","state","from","title","SearchMovies","searchQuery","setSearchParams","setSearchName","onSubmit","event","preventDefault","nextParams","trim","search","type","autoComplete","autoFocus","placeholder","onChange","filmSearch","target","useSearchParams","searchParams","get"],"sourceRoot":""}