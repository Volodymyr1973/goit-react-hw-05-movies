{"version":3,"file":"static/js/120.2d89912a.chunk.js","mappings":"mOACA,EAAuB,uBAAvB,EAAsD,wB,SCUtD,EAPiB,WACjB,IAAMA,GAAWC,EAAAA,EAAAA,MACb,OACI,UAAC,KAAD,CAAMC,UAAWC,EAAUC,GAAIJ,EAASK,MAAMC,KAA9C,eAAqD,iBAAMJ,UAAWC,EAAjB,oBAArD,aAEP,ECRD,EAA0B,8BAA1B,EAAgE,4BAAhE,EAAyG,iCAAzG,EAAkJ,4BAAlJ,EAAqL,2BAArL,EAA4N,gCCkBjNI,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,ECmEpB,EA3EqB,WACnB,IAAMG,GAASC,EAAAA,EAAAA,MACTC,EAAWC,OAAOH,EAAOI,UAC/B,GAAoCC,EAAAA,EAAAA,YAApC,eAAOC,EAAP,KAAmBC,EAAnB,KACMxB,GAAWC,EAAAA,EAAAA,MAsBjB,OALAwB,EAAAA,EAAAA,YAAU,WAXRC,MAAM,GAAD,OAJW,gCAIX,iBAAsBP,EAAtB,oBALU,mCAKV,oBACFQ,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,qBACjC,IACAN,MAAK,SAAAO,GAAO,OAAIV,EAAcU,EAAlB,IACZC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GAMf,GAAE,KAGD,gCACE,SAAC,EAAD,IACCb,IACC,iBAAKrB,UAAWC,EAAhB,UACGoB,EAAWgB,aAAc,gBAAKrC,UAAWC,EACxCqC,IAAG,UAzBQ,oCAyBR,OAAoBjB,EAAWgB,aAClCE,IAAKlB,EAAWmB,SACZ,gBAAKxC,UAAWC,EAAWqC,IAAKG,EAAOF,IAAI,aACjD,4BACC,eAAGvC,UAAWC,EAAd,UACEoB,EAAWmB,MACXnB,EAAWqB,cACV,iCAASrB,EAAWqB,aAAaC,MAAM,EAAG,GAA1C,QAEA,wCALgCtC,MAQpC,eAAGL,UAAWC,EAAd,0BACc,kBAAMD,UAAWC,EAAjB,UAA4BiB,OAAO0B,SAAmC,GAA1BvB,EAAWwB,cAAvD,UADgBxC,MAG9B,eAAGL,UAAWC,EAAd,wBACY,mBAAK,iBAAMD,UAAWC,EAAjB,SAA4BoB,EAAWyB,aAD1BzC,MAG9B,eAAGL,UAAWC,EAAd,qBACS,kBACNoB,EAAW0B,OAAOC,KAAI,SAAAC,GAAK,OAC1B,kBAAMjD,UAAWC,EAAjB,cAA6BgD,EAAMC,KAAnC,MAD0B,MAFA7C,YASlC,gBAAIL,UAAWC,EAAf,WACE,yBAAmB,SAAC,KAAD,CAAMC,GAAG,OAAOC,MAAO,CAACC,KAAMN,EAASK,MAAMC,MAA7C,mBAAVC,MACT,yBAAmB,SAAC,KAAD,CAAMH,GAAG,UAAUC,MAAO,CAACC,KAAMN,EAASK,MAAMC,MAAhD,sBAAVC,SAKT,SAAC,EAAA8C,SAAD,CAAUC,UAAU,sCAApB,UACI,SAAC,KAAD,QAMX,C","sources":["webpack://react-homework-template/./src/components/backlink/BackLink.module.css?e5f7","components/backlink/BackLink.js","webpack://react-homework-template/./src/page/MovieDetails.module.css?ff23","../node_modules/nanoid/index.browser.js","page/MovieDetails.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"link\":\"BackLink_link__1cqwz\",\"arrow\":\"BackLink_arrow__6PGXD\"};","import { Link, useLocation } from \"react-router-dom\";\nimport css from './BackLink.module.css'\n\n\nconst BackLink = () => {\nconst location = useLocation();\n    return (\n        <Link className={css.link} to={location.state.from}> <span className={css.arrow}>&#10229;</span> Go back</Link>\n    )\n}\n\nexport default BackLink;","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"MovieDetails_section__rnZrF\",\"image\":\"MovieDetails_image__p4xaz\",\"main_title\":\"MovieDetails_main_title__ARSkb\",\"title\":\"MovieDetails_title__SBO4C\",\"line\":\"MovieDetails_line__+yv3B\",\"link_list\":\"MovieDetails_link_list__xkSP-\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\n// import { Cast } from '../components/cast/Cast';\n// import { Reviews } from 'components/reviews/Reviews';\nimport { useState, useEffect, Suspense } from 'react';\nimport Image from '../components/image/NoFoto.jpg';\nimport BackLink from 'components/backlink/BackLink';\nimport css from './MovieDetails.module.css';\nimport PropTypes from \"prop-types\";\nimport { nanoid } from 'nanoid'\n\n\nconst MovieDetails = () => {\n  const params = useParams();\n  const paramsId = Number(params.moviesId);\n  const [filmDetail, setFilmDetail] = useState();\n  const location = useLocation();\n  const KEY_FILM = '0402ef8c6d0b2370fa6ac2b572dad398';\n  const originUrl = 'https://api.themoviedb.org/3/';\n  const baseImageUrl = 'https://image.tmdb.org/t/p/w500/';\n\n const searchFilmById = () => {\n    fetch(`${originUrl}movie/${paramsId}?api_key=${KEY_FILM}&language=en-US`)\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        return Promise.reject(new Error('Insert other name'));\n      })\n      .then(results => setFilmDetail(results))\n      .catch(error => console.log(error));\n  };\n\n  useEffect(() => {\n      searchFilmById();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <section>\n      <BackLink />\n      {filmDetail && (\n        <div className={css.section}>\n          {filmDetail.poster_path ? <img className={css.image}\n            src={`${baseImageUrl}${filmDetail.poster_path}`}\n            alt={filmDetail.title}\n          /> :  <img className={css.image} src={Image} alt=\"No foto\"/>}\n          <div>\n           <p className={css.main_title} key={nanoid()}>\n            {filmDetail.title}\n            {filmDetail.release_date ? (\n              <span> ({filmDetail.release_date.slice(0, 4)})</span>\n            ) : (\n              <span> (----)</span>\n            )}\n          </p>\n          <p className={css.title} key={nanoid()}>\n            User score: <span className={css.line}>{Number.parseInt(filmDetail.vote_average * 10)} &#37;</span>\n          </p>\n          <p className={css.title} key={nanoid()}>\n            Overview: <br/><span className={css.line}>{filmDetail.overview}</span>\n          </p>\n          <p className={css.title} key={nanoid()}>\n            Genres:<br/>\n            {filmDetail.genres.map(genre => (\n              <span className={css.line}> {genre.name} </span>\n            ))}\n          </p>\n        </div>\n                  </div>\n      )}\n      <ul className={css.link_list}>\n        <li key={nanoid()}><Link to=\"cast\" state={{from: location.state.from}}>Cast</Link></li>\n        <li key={nanoid()}><Link to=\"reviews\" state={{from: location.state.from}}>Reviews</Link></li>\n      </ul>\n\n      {/* <Cast />\n        <Reviews /> */}\n        <Suspense fallback={<p>Loading...</p>}>\n            <Outlet />\n        </Suspense>\n    \n      \n    </section>\n  );\n};\n\nexport default MovieDetails;\n\nMovieDetails.propTypes = {\n  state: PropTypes.object,\n  \n};"],"names":["location","useLocation","className","css","to","state","from","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","params","useParams","paramsId","Number","moviesId","useState","filmDetail","setFilmDetail","useEffect","fetch","then","response","ok","json","Promise","reject","Error","results","catch","error","console","log","poster_path","src","alt","title","Image","release_date","slice","parseInt","vote_average","overview","genres","map","genre","name","Suspense","fallback"],"sourceRoot":""}