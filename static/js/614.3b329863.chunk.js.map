{"version":3,"file":"static/js/614.3b329863.chunk.js","mappings":"0NAmDA,EA/CiB,SAACA,GAClB,OAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAKQC,EAAOJ,EAAMK,WA0BnB,OAVAC,EAAAA,EAAAA,YAAU,WACiB,KAArBN,EAAMK,YAdVE,MAAM,GAAD,OALW,gCAKX,gCANU,mCAMV,YAJO,UAIP,OACqDH,EADrD,oBAGFI,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,qBACjC,IACAN,MAAK,gBAAGO,EAAH,EAAGA,QAAH,OAAiBZ,EAAcY,EAA/B,IACLC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,EAAhB,GAUf,GAAE,CAACjB,EAAMK,cAMN,0BACE,wBACGH,EAAWkB,KAAI,SAAAC,GAAI,OAClB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAACC,KAAM,WAA9C,SAA2DJ,EAAKK,SADzDL,EAAKE,GADI,OAS7B,ECCD,EA7Ce,WAEb,OAAwCI,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,WAAa,GAClD,GAAoC9B,EAAAA,EAAAA,UAAS6B,GAA7C,eAAOzB,EAAP,KAAmB2B,EAAnB,KAkBA,OACE,iCACE,0BACE,kBAAMC,SAdmB,SAAAC,GAC7BA,EAAMC,iBACmB,KAAtB9B,EAAW+B,QAIdJ,EAAc3B,GACdwB,EAAgB,CAACQ,OAAQhC,IACzB6B,EAAMI,cAAcC,SAASF,OAAOG,MAAQ,IAL1CN,EAAMI,cAAcE,MAAQ,EAM/B,EAKK,WACE,kBACEpC,KAAK,SACLqC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZJ,MAAOnC,EACPwC,SA3BS,SAAAX,GACnB,IAAMY,EAAaZ,EAAMI,cAAcE,MACvCR,EAAcc,EACb,KA0BO,mBAAQL,KAAK,SAAb,UACE,6CAIA,SAAC,EAAD,CAAUpC,WAAYA,MAGjC,C","sources":["components/filmlist/FilmList.js","page/Movies.js"],"sourcesContent":["import { Link } from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FilmList = (props) => {\nconst [searchFilm, setSearchFilm] = useState([]);\n   \n  const KEY_FILM = '0402ef8c6d0b2370fa6ac2b572dad398';\n  const originUrl = 'https://api.themoviedb.org/3/';\n  const query = \"query=\";\n  const name = props.searchName;\n\n  const searchFilmByName = () => {\n    fetch(\n      `${originUrl}search/movie?api_key=${KEY_FILM}&${query}${name}&language=en-US`\n    )\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n        return Promise.reject(new Error('Insert other name'));\n      })\n      .then(({ results }) => setSearchFilm(results))\n      .catch(error => console.log(error));\n  };\n\n  useEffect(() => {\n    if (props.searchName === '') {\n      return;\n    } else\n  \n    searchFilmByName();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.searchName]);\n\n \n  return (\n\n        \n      <div>\n        <ul>\n          {searchFilm.map(film => (\n            <li key={film.id}>\n              <Link to={`/movies/${film.id}`} state={{from: \"/movies\"}}>{film.title}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    \n  );\n}\nexport default FilmList;\n\nFilmList.propTypes = {\nprops: PropTypes.string,\n };","import { useState } from 'react';\nimport FilmList from 'components/filmlist/FilmList';\nimport PropTypes from \"prop-types\";\nimport { useSearchParams } from 'react-router-dom';\n\n\nconst Movies = () => {\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('search') || '';\n  const [searchName, setSearchName] = useState(searchQuery);\n  \nconst handleChange = event => {\n  const filmSearch = event.currentTarget.value;\n  setSearchName(filmSearch);\n  }\n\n  const handleSubmitSearchFilm = event => {\n    event.preventDefault();\n    if(searchName.trim() === '') {\n      event.currentTarget.value = '';\n      return;\n    } else\n    setSearchName(searchName);\n    setSearchParams({search: searchName});\n    event.currentTarget.elements.search.value = '';\n  };\n\n  return (\n    <>\n      <div>\n        <form onSubmit={handleSubmitSearchFilm}>\n          <input\n            name=\"search\"\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search films\"\n            value={searchName}\n            onChange={handleChange}\n          />\n          <button type=\"submit\">\n            <span>Search</span>\n          </button>\n        </form>\n      </div>\n            <FilmList searchName={searchName}/>\n    </>\n  );\n};\n\nexport default Movies;\n\nMovies.propTypes = {\n  searchName: PropTypes.string,\n  \n};"],"names":["props","useState","searchFilm","setSearchFilm","name","searchName","useEffect","fetch","then","response","ok","json","Promise","reject","Error","results","catch","error","console","log","map","film","to","id","state","from","title","useSearchParams","searchParams","setSearchParams","searchQuery","get","setSearchName","onSubmit","event","preventDefault","trim","search","currentTarget","elements","value","type","autoComplete","autoFocus","placeholder","onChange","filmSearch"],"sourceRoot":""}